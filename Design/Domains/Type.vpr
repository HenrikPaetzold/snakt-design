domain Type  {

  unique function IntType(): Type
  unique function BooleanType(): Type
  unique function UnitType(): Type
  unique function NothingType(): Type
  unique function AnyType(): Type
  unique function FunctionType(): Type

  function NullableType(t: Type): Type
  function isSubtype(a: Type, b: Type): Bool
  function is_nullable_type(t: Type): Bool

  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != IntType())
  }
  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != BooleanType())
  }
  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != UnitType())
  }
  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != NothingType())
  }
  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != AnyType())
  }
  axiom {
    (forall t: Type :: { NullableType(t) }
      NullableType(t) != FunctionType())
  }
  // Axioms of the form NullableType(T) != ClassType()
  axiom {
    (forall t: Type, t2: Type ::
      t != t2 ==> NullableType(t) != NullableType(t2))
  }

  axiom { !is_nullable_type(IntType()) }
  axiom { !is_nullable_type(BooleanType()) }
  axiom { !is_nullable_type(UnitType()) }
  axiom { !is_nullable_type(NothingType()) }
  axiom { !is_nullable_type(AnyType()) }
  axiom { !is_nullable_type(FunctionType()) }
  // Axioms of the form !is_nullable_type(ClassType())
  axiom {
    (forall t: Type ::
      { NullableType(t) }
      is_nullable_type(NullableType(t)))
  }

  axiom { isSubtype(IntType(), AnyType()) }
  axiom { isSubtype(BooleanType(), AnyType()) }
  axiom { isSubtype(UnitType(), AnyType()) }
  axiom { isSubtype(NothingType(), AnyType()) }
  axiom { isSubtype(AnyType(), AnyType()) }
  axiom { isSubtype(FunctionType(), AnyType()) }
  // Axioms of the form isSubtype(ClassType(), AnyType())

  axiom {
    (forall t: Type ::isSubtype(t, t))
  }
  axiom {
    (forall t: Type, t2: Type, t3: Type :: { isSubtype(t, t2), isSubtype(t2, t3) }
      isSubtype(t, t2) && isSubtype(t2, t3) ==> isSubtype(t, t3))
  }
  axiom {
    (forall t: Type, t2: Type :: { isSubtype(t, t2), isSubtype(t2, t) }
      isSubtype(t, t2) && isSubtype(t2, t) ==> t == t2)
  }

  axiom {
    (forall t: Type, t2: Type :: { isSubtype(NullableType(t), NullableType(t2)) }
      isSubtype(t, t2) ==> isSubtype(NullableType(t), NullableType(t2)))
  }

  axiom {
    (forall t: Type :: { isSubtype(NothingType(), t) }
      isSubtype(NothingType(), t))
  }
}