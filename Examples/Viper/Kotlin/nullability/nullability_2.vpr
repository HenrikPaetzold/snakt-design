/**
 * Approach 2
 * Read the nullability doc in the design directory for more insigth.
 */

domain Nullable[T] {
    function null_val(): Nullable[T]
    function nullable_of(val: T): Nullable[T]
    function val_of_nullable(x: Nullable[T]): T

    axiom some_not_null {
        forall x: T :: { nullable_of(x) }
            nullable_of(x) != null_val()
    }
    axiom val_of_nullable_of_val {
        forall x: T :: { val_of_nullable(nullable_of(x)) }
            val_of_nullable(nullable_of(x)) == x
    }
    axiom nullable_of_val_of_nullable {
        forall x: Nullable[T] :: { nullable_of(val_of_nullable(x)) }
            x != null_val() ==> nullable_of(val_of_nullable(x)) == x
    }
}

method null_check(x: Nullable[Ref]) returns (ret: Bool)
    ensures ret <==> x != null_val()
{
    if (x == null_val()) {
        ret := false
    } else {
        ret := true
    }
}

method some_method(x: Nullable[Int]) {}

method pass_nullable_parameter(x: Nullable[Int])
    ensures x == old(x)
{
    some_method(x)
}

method return_nullable(b: Bool) returns (ret: Nullable[Int]) 
    ensures b <==> ret == null_val()
{
    if (b) {
        ret := null_val()
    } else {
        ret := nullable_of(0)   // Cast needs to be inserted, could be solved if dynamic subtyping is solved
    }
}

method smart_cast(x: Nullable[Int]) returns (ret: Int)
    ensures x == null_val() ==> ret == 0
    ensures x != null_val() ==> ret == val_of_nullable(x)
{
    if (x == null_val()) {
        ret := 0
    } else {
        // Here we need to be able to extract the smart cast that the compiler does and
        // convert the type into a non-nullable one.
        ret := val_of_nullable(x)
    }
}