field file: Ref
field buf: Ref

predicate File(this: Ref)

// let's assume we use Viper built-in null
// Everything is mutable here, for the sake of simplicity read predicate are omitted

predicate Buffer(this: Ref){
    acc(this.file) &&
    (this.file != null ==> File(this.file))
}

predicate Lexer(this: Ref){
    acc(this.buf) && Buffer(this.buf)
}

method Buffer$constructor(_file: Ref) returns (ret: Ref)
requires File(_file)
ensures Buffer(ret)
ensures unfolding Buffer(ret) in ret.file == _file


method Buffer$atEOF(this: Ref) returns(ret: Bool)
requires Buffer(this)
ensures Buffer(this)

method Buffer$sync(this: Ref)
requires Buffer(this)
ensures Buffer(this)

method Buffer$getFile(this: Ref) returns(ret: Ref)
requires Buffer(this)
ensures Buffer(this)
ensures (ret != null) ==> File(ret)
{
    var temp: Ref

    unfold Buffer(this)
    temp := this.file
    fold Buffer(this)

    unfold Buffer(this)
    this.file := null
    fold Buffer(this)

    ret := temp
}

method Lexer$isDone(this: Ref) returns (ret: Bool)
requires Lexer(this)
ensures Lexer(this)
{
    unfold Lexer(this)
    ret := Buffer$atEOF(this.buf)
    fold Lexer(this)
}

method Lexer$replace(this: Ref, _file: Ref) returns (ret: Ref)
requires Lexer(this)
requires File(_file)
ensures Lexer(this)
ensures (ret != null) ==> File(ret)
{
    var _old: Ref
    var temp: Ref

    unfold Lexer(this)
    Buffer$sync(this.buf)
    fold Lexer(this)

    unfold Lexer(this)
    _old := Buffer$getFile(this.buf)
    fold Lexer(this)

    unfold Lexer(this)
    this.buf := Buffer$constructor(_file)
    fold Lexer(this)

    ret := _old 
}