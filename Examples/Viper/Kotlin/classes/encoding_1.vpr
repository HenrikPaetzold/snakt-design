/***

The document shows a possible encoding for Kotlin class hierarchies
with Viper. The encoding *does not* use a super reference field for classes' parent.

```kotlin
// The @Pure annotation is similar to what Prusti does, it assumes it is a pure
// mathematical function.

open class A(val foo: Int, val bar: Int) {
    @Pure fun sum(): Int = foo + bar
}

// In this case the class B does not ovveride the `foo` and `bar`
class B(val zig: Int, foo: Int, bar: Int): A(foo, bar) 
```

Class hierarchy in the file:
    ┌───────────┐
    │           │
    │    Any    │ Superclass of every Kotlin's classes.
    │           │
    └─────▲─────┘
          │
    ┌─────┴─────┐
    │           │
    │     A     │ Open to extensions. Define two properties: `foo` and `bar`.
    │           │
    └─────▲─────┘
          │
    ┌─────┴─────┐
    │           │
    │     B     │ Closed to extensions. Define one new property: `zig`.
    │           │
    └───────────┘

*/ 

field A_foo: Int;
field A_bar: Int;

field B_zig: Int;

predicate A(this: Ref) 
{
    acc(this.A_foo) && acc(this.A_bar)
}

predicate B(this: Ref)
{
    A(this) && acc(this.B_zig)
}

method A_new(foo: Int, bar: Int) returns (this: Ref)
    requires true
    ensures A(this)
    ensures A_get_foo(this) == foo
    ensures A_get_bar(this) == bar
{
    this := new(A_foo, A_bar)
    this.A_foo := foo
    this.A_bar := bar
    fold A(this)
}

function A_get_foo(this: Ref): Int
    requires A(this)
{
    unfolding A(this) in this.A_foo
}

function A_get_bar(this: Ref): Int
    requires A(this)
{
    unfolding A(this) in this.A_bar
}

function A_sum(this: Ref): Int
    requires A(this)
    ensures unfolding A(this) in result == (this.A_foo + this.A_bar)
{
    unfolding A(this) in this.A_foo + this.A_bar
}

method B_new(zig: Int, foo: Int, bar: Int) returns (this: Ref)
    requires true
    ensures B(this)
    ensures B_get_zig(this) == zig
    ensures B_get_foo(this) == foo
    ensures B_get_bar(this) == bar
{
    this := new(A_foo, A_bar, B_zig)
    this.B_zig := zig
    this.A_foo := foo
    this.A_bar := bar
    fold A(this)
    fold B(this)
}

function B_get_zig(this: Ref): Int
    requires B(this)
{
    unfolding B(this) in this.B_zig
}

function B_get_foo(this: Ref): Int
    requires B(this)
{
    unfolding B(this) in (unfolding A(this) in this.A_foo)
}

function B_get_bar(this: Ref): Int
    requires B(this)
{
    unfolding B(this) in (unfolding A(this) in this.A_bar)
}

method driver0() 
{
    var a: Ref 
    a := A_new(10, 20)

    var foo: Int
    var bar: Int
    var sum: Int

    foo := A_get_foo(a)
    bar := A_get_bar(a)
    sum := A_sum(a)

    assert foo == 10
    assert bar == 20
    assert sum == 30
}

method driver1()
{
    var b: Ref
    b := B_new(10, 20, 30) // B(zig, foo, bar)

    // Check the value of b.zig == 10
    var zig: Int
    zig := B_get_zig(b)
    assert zig == 10

    // Check the value of b.foo == 20
    var foo: Int
    foo := B_get_foo(b)
    assert foo == 20

    // Check the value of b.bar == 30
    var bar: Int
    bar := B_get_bar(b)
    assert bar == 30
}